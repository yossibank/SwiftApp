import ComposableArchitecture
import SwiftUI

/// 「The Composable Architecture」で登場する各役割概要
///
/// ① Reducer(純粋関数)
///   → アプリケーションのStateを管理し、Actionに応じて適切に更新する
///     1. 状態の更新(現在の状態とアクションを受け取り、新しい状態を更新する)
///     2. ビジネスロジックの処理
///     3. 副作用の生成(Effectを生成し、APIリクエストやデータベースアクセスなどの処理を実行)
///     4. アプリケーションの一貫性の保持
///
/// ② Action
///   → アプリケーションのビジネスロジックとUIの間で発生するイベントやユーザー操作を表現する
///     1. 状態の変更を指示(アプリケーションの状態をどのように変更すべきかをReducerに送信する)
///     2. イベントの表現(ユーザー操作、システムイベントなどのイベントを表現する)
///     3. 副作用のトリガー(副作用を引き起こすActionをReducerに発行させて非同期処理などを実行する)
///     4. UIとロジックの分離(ViewはActionを発行するだけで、処理の方法はReducerが決定する)
///
/// ③ State
///   → アプリケーションのデータとUI状態を管理し、動作と表示に必要な全ての情報を保持する
///     1. アプリケーションの現在の状態の表現(アプリ内のさまざまな状態を表すデータ集合)
///     2. データの集中管理(アプリケーションの全ての重そうなデータを一箇所で管理する)
///     3. UIの更新の基盤(Stateの変更がUIの更新のトリガーとなる)
///     4. Reducerとの連携(StateはReducer内によってのみ更新される)
///
/// ④ Store
///   → アプリケーションの状態(State)を保持し、ビジネスロジックを処理するReducerと連携して、状態の更新と管理を行う
///     1. 状態の保持(アプリケーションの全体(またはその一部)の状態を保持する)
///     2. 状態の変更を通知(状態の変更をViewに通知する)
///     3. UIとの統合(Viewに状態を提供し、Viewからのアクションを受け取る)
///     4. 副作用の処理(Reducerによって生成された副作用を処理し、非同期操作などを実行する)
///     5. Reducerとの連携(ReducerにActionを送信し、新しい状態を更新する)
